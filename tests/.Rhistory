# These integration tests make it easy and quick to detect if output changes
# for various combinations of options and estimators. They rely heavily on
# set.seed() and thus anything that changes the seed will invalidate these
# tests and will require tests with a large number of bootstraps to ensure that
# there is no regression.
#
# These tests are similar in code to test-estimators.R. In the future we could
# consider convenience functions to centralize the shared code.
library(simultcband)
set.seed(1)
ssize <- 100
dat <- data.frame(x = rnorm(ssize), y = rnorm(ssize))
dat_kde <- data.frame(y = rnorm(ssize))
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_kde <- ~y
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
for (i in seq_along(estimators_l)) {
# not all estimators support weighted_boot, so we only vary robust_var here. We test weighted_boot below.
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_l[[i]], data = dat, B = 10, robust_var = FALSE, weighted_boot = FALSE))
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_l[[i]], data = dat, B = 10, robust_var = TRUE, weighted_boot = FALSE))
}
for (i in seq_along(estimators_deriv_l)) {
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_deriv_l[[i]], data = dat, B = 10, deriv_order = 1))
}
print(cband(formula = f_kde, alpha = 0.1, estimator_gen = estimator_kde, data = dat_kde, B = 10))
print(cband(formula = f_lp, alpha = 0.1, estimator_gen = estimator_loc, data = dat, B = 10))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = FALSE, robust_var = FALSE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = FALSE, robust_var = TRUE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = TRUE, robust_var = FALSE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = TRUE, robust_var = TRUE))
library(simultcband)
source(simultcband)
######## Example 0: 1-dimensional ######
library(devtools)
library(data.table)
library(ggplot2)
load_all("/Users/douglasturner/Documents/git/simultcband")
set.seed(1)
ssize <- 100
dat <- data.frame(x = rnorm(ssize), y = rnorm(ssize))
dat_kde <- data.frame(y = rnorm(ssize))
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_kde <- ~y
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
for (i in seq_along(estimators_l)) {
# not all estimators support weighted_boot, so we only vary robust_var here. We test weighted_boot below.
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_l[[i]], data = dat, B = 10, robust_var = FALSE, weighted_boot = FALSE))
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_l[[i]], data = dat, B = 10, robust_var = TRUE, weighted_boot = FALSE))
}
for (i in seq_along(estimators_deriv_l)) {
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_deriv_l[[i]], data = dat, B = 10, deriv_order = 1))
}
print(cband(formula = f_kde, alpha = 0.1, estimator_gen = estimator_kde, data = dat_kde, B = 10))
print(cband(formula = f_lp, alpha = 0.1, estimator_gen = estimator_loc, data = dat, B = 10))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = FALSE, robust_var = FALSE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = FALSE, robust_var = TRUE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = TRUE, robust_var = FALSE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = TRUE, robust_var = TRUE))
set.seed(1)
ssize <- 100
dat <- data.frame(x = rnorm(ssize), y = rnorm(ssize))
dat_kde <- data.frame(y = rnorm(ssize))
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_kde <- ~y
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
for (i in seq_along(estimators_l)) {
# not all estimators support weighted_boot, so we only vary robust_var here. We test weighted_boot below.
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_l[[i]], data = dat, B = 10, robust_var = FALSE, weighted_boot = FALSE))
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_l[[i]], data = dat, B = 10, robust_var = TRUE, weighted_boot = FALSE))
}
for (i in seq_along(estimators_deriv_l)) {
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_deriv_l[[i]], data = dat, B = 10, deriv_order = 1))
}
print(cband(formula = f_kde, alpha = 0.1, estimator_gen = estimator_kde, data = dat_kde, B = 10))
print(cband(formula = f_lp, alpha = 0.1, estimator_gen = estimator_loc, data = dat, B = 10))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = FALSE, robust_var = FALSE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = FALSE, robust_var = TRUE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = TRUE, robust_var = FALSE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = TRUE, robust_var = TRUE))
set.seed(1)
ssize <- 100
dat <- data.frame(x = rnorm(ssize), y = rnorm(ssize))
dat_kde <- data.frame(y = rnorm(ssize))
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_kde <- ~y
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
for (i in seq_along(estimators_l)) {
# not all estimators support weighted_boot, so we only vary robust_var here. We test weighted_boot below.
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_l[[i]], data = dat, B = 10, robust_var = FALSE, weighted_boot = FALSE))
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_l[[i]], data = dat, B = 10, robust_var = TRUE, weighted_boot = FALSE))
}
for (i in seq_along(estimators_deriv_l)) {
print(cband(formula = f1, alpha = 0.1, estimator_gen = estimators_deriv_l[[i]], data = dat, B = 10, deriv_order = 1))
}
print(cband(formula = f_kde, alpha = 0.1, estimator_gen = estimator_kde, data = dat_kde, B = 10))
print(cband(formula = f_lp, alpha = 0.1, estimator_gen = estimator_loc, data = dat, B = 10))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = FALSE, robust_var = FALSE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = FALSE, robust_var = TRUE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = TRUE, robust_var = FALSE))
print(cband(formula = f_s, alpha = 0.1, estimator_gen = estimator_gam, data = dat, B = 10, weighted_boot = TRUE, robust_var = TRUE))
