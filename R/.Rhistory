ind
res[i,s] = 1
s
i
# These tests check whether the plim of the confidence band is unchanged.
# If simple output tests are successful, then these tests are redundant.
# Typically, these tests should be run when there is a change that alters
# the random seed. This change will cause output tests to fail, but the
# plim or P(L(x) < f(x) < U(x)) is unchanged.
library(simultcband)
set.seed(1)
S = 1
ssize <- 100
x = seq(-5,5,length.out = ssize)
sigma = 10
alpha=.05
y = (x)^2
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
print(colSums(res)/S)
y
bands$lower
bands$lower > y
bands$lower
y
bands$upper
bands$upper - bands$lower
rnorm(ssize, sigma)
bands$lower > y
estimators_l <- c(
estimator_gam = estimator_gam,
)
estimators_l <- c(
estimator_gam = estimator_gam
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
res
sum(bands$lower > y)
bands$lower > y
dat$y
dat$y - y
?rnorm
# These tests check whether the plim of the confidence band is unchanged.
# If simple output tests are successful, then these tests are redundant.
# Typically, these tests should be run when there is a change that alters
# the random seed. This change will cause output tests to fail, but the
# plim or P(L(x) < f(x) < U(x)) is unchanged.
library(simultcband)
set.seed(1)
S = 1
ssize <- 100
x = seq(-5,5,length.out = ssize)
sigma = 10
alpha=.05
y = (x)^2
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sigma = sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
print(colSums(res)/S)
# These tests check whether the plim of the confidence band is unchanged.
# If simple output tests are successful, then these tests are redundant.
# Typically, these tests should be run when there is a change that alters
# the random seed. This change will cause output tests to fail, but the
# plim or P(L(x) < f(x) < U(x)) is unchanged.
library(simultcband)
set.seed(1)
S = 1
ssize <- 100
x = seq(-5,5,length.out = ssize)
sigma = 10
alpha=.05
y = (x)^2
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
print(colSums(res)/S)
dat$y - y
estimators_l <- c(
estimator_gam = estimator_gam
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
bands
bands$lower
y
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
ind
bands$lower > y
bands$lower
dat$y
# These tests check whether the plim of the confidence band is unchanged.
# If simple output tests are successful, then these tests are redundant.
# Typically, these tests should be run when there is a change that alters
# the random seed. This change will cause output tests to fail, but the
# plim or P(L(x) < f(x) < U(x)) is unchanged.
library(simultcband)
set.seed(1)
S = 1
ssize <- 100
x = seq(-5,5,length.out = ssize)
sigma = 1
alpha=.05
y = (x)^2
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
res
bands$lower > y
y
dat$y
bands$lower
estimators_l[[i]]
bands$upper
dat
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
bands
f1
gam(f1, data = dat)
res = gam(f1, data = dat)
res$fitted.values
res = gam(f_s, data = dat)
res$fitted.values
# These tests check whether the plim of the confidence band is unchanged.
# If simple output tests are successful, then these tests are redundant.
# Typically, these tests should be run when there is a change that alters
# the random seed. This change will cause output tests to fail, but the
# plim or P(L(x) < f(x) < U(x)) is unchanged.
library(simultcband)
set.seed(1)
S = 1
ssize <- 100
x = seq(-5,5,length.out = ssize)
sigma = 1
alpha=.05
y = (x)^2
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
if (estimators_l[[i]] ==estiamtor_gam) {
f = f_s
}
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
if (estimators_l[[i]] ==estimator_gam) {
f = f_s
}
if identical(estimators_l[[i]] ==estimator_gam) {
f = f_s
}
if (identical(estimators_l[[i]] ==estimator_gam)) {
f = f_s
}
if (identical(estimators_l[[i]],estimator_gam)) {
f = f_s
}
f
# These tests check whether the plim of the confidence band is unchanged.
# If simple output tests are successful, then these tests are redundant.
# Typically, these tests should be run when there is a change that alters
# the random seed. This change will cause output tests to fail, but the
# plim or P(L(x) < f(x) < U(x)) is unchanged.
library(simultcband)
set.seed(1)
S = 1
ssize <- 100
x = seq(-5,5,length.out = ssize)
sigma = 1
alpha=.05
y = (x)^2
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
f = f1
if (identical(estimators_l[[i]],estimator_gam)) {
f = f_s
}
if (identical(estimators_l[[i]],estimator_loc)) {
f = f_lp
}
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
print(colSums(res)/S)
estimators_l = c(estimator_gam)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
f = f1
if (identical(estimators_l[[i]],estimator_gam)) {
f = f_s
}
if (identical(estimators_l[[i]],estimator_loc)) {
f = f_lp
}
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
bands  = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
res
bands$lower
f1
# These tests check whether the plim of the confidence band is unchanged.
# If simple output tests are successful, then these tests are redundant.
# Typically, these tests should be run when there is a change that alters
# the random seed. This change will cause output tests to fail, but the
# plim or P(L(x) < f(x) < U(x)) is unchanged.
library(simultcband)
set.seed(1)
S = 1
ssize <- 100
x = seq(-5,5,length.out = ssize)
sigma = 1
alpha=.05
y = (x)^2
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_lm = estimator_lm,
estimator_rq = estimator_rq,
estimator_loess = estimator_loess,
estimator_glm = estimator_glm,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
f = f1
if (identical(estimators_l[[i]],estimator_gam)) {
f = f_s
}
if (identical(estimators_l[[i]],estimator_loc)) {
f = f_lp
}
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
bands  = cband(formula = f, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
print(colSums(res)/S)
res
# These tests check whether the plim of the confidence band is unchanged.
# If simple output tests are successful, then these tests are redundant.
# Typically, these tests should be run when there is a change that alters
# the random seed. This change will cause output tests to fail, but the
# plim or P(L(x) < f(x) < U(x)) is unchanged.
library(simultcband)
set.seed(1)
S = 1
ssize <- 100
x = seq(-5,5,length.out = ssize)
sigma = 1
alpha=.05
y = (x)^2
# todo: once we implement an abstract layer for a formula to
# work with multiple estimators, loop through estimators with
# just one formula to simplify things.
# formulas for the tests
f1 <- y ~ x
f_lp <- y ~ locfit::lp(x)
f_s <- y ~ s(x)
# todo: we should have a way to get a list of all estimators
# and all that support derivative estimation.
estimators_l <- c(
estimator_gam = estimator_gam,
estimator_loess = estimator_loess,
estimator_npreg = estimator_npreg,
estimator_loc = estimator_loc
)
estimators_deriv_l <- c(
estimator_gam_deriv = estimator_gam_deriv,
estimator_spline = estimator_spline
)
res = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_l)) {
f = f1
if (identical(estimators_l[[i]],estimator_gam)) {
f = f_s
}
if (identical(estimators_l[[i]],estimator_loc)) {
f = f_lp
}
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
bands  = cband(formula = f, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
print(colSums(res)/S)
res_deriv = matrix(0, nrow = S, ncol = length(estimators_l))
for (i in seq_along(estimators_deriv_l)) {
for (s in 1:S) {
dat <- data.frame(x = x, y = y + rnorm(ssize, mean = 0 ,sd = sigma))
# estimator_spline does not estimate SE so need to set robust_var = TRUE.
bands = cband(formula = f1, alpha = alpha, estimator_gen = estimators_l[[i]], data = dat, B = 500, robust_var = FALSE, weighted_boot = FALSE, deriv_order = 1)
ind = (sum(bands$lower > y)==0) & (sum(bands$upper < y) ==0)
if (ind==FALSE) {
res[s,i] = 1
}
}
}
print(colSums(res_deriv)/S)
